// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enums :
enum UserType {
  ADMIN
  USER
  OWNER
}

enum RoomType {
  PRIVATE
  PUBLIC
  PROTECTED
}

model UserSocket {
  id         String   @id @default(uuid())
  socketId   String
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// models :
model User {
  id                   String                 @id @default(uuid())
  login                String                 @unique
  email                String                 @unique
  password             String?
  name                 String?
  kind                 String?
  avatar               String?
  bg_color             String[]               @default(["#918CA9", "#211F2F"])
  paddle_color         String?                @default("#E0E0E0")
  ball_color           String?                @default("#E0E0E0")
  location             String?
  cursus_users         Cursus?                @relation(fields: [cursusId], references: [id])
  intraId              Int?
  banner               String?
  is_active            Boolean                @default(false)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  Members              Members[]
  Messages             Messages[]
  Rooms                Rooms[]
  directMessage        DirectMessage[]
  UserSocket           UserSocket[]
  cursusId             String?
  Notification         Notification[]
  ChanneLNotifications ChanneLNotifications[]
}

model Notification {
  id         String   @id @default(uuid())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  User       User     @relation(fields: [userId], references: [id])
  userId     String
}

model ChanneLNotifications {
  id         String   @id @default(uuid())
  content    String
  User       User     @relation(fields: [userId], references: [id])
  channel    Rooms    @relation(fields: [channelId], references: [id])
  channelId  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     String
}

model Cursus {
  id            String @id @default(uuid())
  grade         String
  level         Float
  blackholed_at String
  User          User[]
}

model Rooms {
  id                   String                 @id @default(uuid())
  name                 String                 @unique
  type                 RoomType               @default(PUBLIC)
  members              Members[]
  messages             Messages[]
  viewedmessage        Int                    @default(0)
  password             String?
  hasAccess            Boolean                @default(false)
  accesspassword       String?                @default("")
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  User                 User[]
  ChanneLNotifications ChanneLNotifications[]
}

model DirectMessage {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Members {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id])
  RoomId     Rooms?    @relation(fields: [roomsId], references: [id])
  type       UserType  @default(USER)
  userId     String
  roomsId    String?
  isban      Boolean   @default(false)
  ismute     Boolean   @default(false)
  mute_at    DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Messages {
  content    String
  id         String   @id @default(uuid())
  sender     User     @relation(fields: [senderId], references: [id])
  roomId     Rooms?   @relation(fields: [roomsId], references: [id])
  senderId   String
  viewed     Int      @default(0)
  roomsId    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
